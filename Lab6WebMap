<!DOCTYPE html>
<html>
<head>
    <title>HannahWard TAMU Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" 
          integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==" 
          crossorigin=""/>
    <style>
        #mapid {
            height: 600px;
            width: 800px;
        }
        .highlight {
            opacity: 0.8;
            weight: 3;
        }
        .info {
            position: absolute;
            top: 10px;
            right: 10px;
            background: white;
            padding: 8px;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
            font-family: Arial, sans-serif;
        }
    </style>
</head>
<body>
    <h2>HannahWard TAMU Map</h2>
    <div id="mapid"></div>
    
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js" 
            integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==" 
            crossorigin=""></script>
    <script>
        // Initialize the map, centered on TAMU
        var map = L.map('mapid').setView([30.6122, -96.3410], 15);

        // Add OpenStreetMap tile layer (no token required)
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Â© OpenStreetMap contributors'
        }).addTo(map);

        // Define the highlight and reset highlight functions
        function highlightFeature(e) {
            var layer = e.target;
            layer.setStyle({
                weight: 5,
                color: '#ffcc00',
                opacity: 1
            });
        }

        function resetHighlight(e) {
            e.target.setStyle({ color: "#500000" }); // Reset to Maroon
        }

        // Function to handle feature interaction (zoom on click)
        function zoomToFeature(e) {
            map.fitBounds(e.target.getBounds());
        }

        // Info Control to display building names
        var info = L.control();

        info.onAdd = function (map) {
            this._div = L.DomUtil.create('div', 'info');
            this.update();
            return this._div;
        };

        info.update = function (props) {
            this._div.innerHTML = props ?
                '<h4>' + props.name + ' (' + props.abbr + ')</h4>' : 'Hover over a building';
        };

        info.addTo(map);

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: function(e) {
                    highlightFeature(e);
                    info.update(feature.properties);
                },
                mouseout: function(e) {
                    resetHighlight(e);
                    info.update();
                },
                click: zoomToFeature
            });
        }

        // Load external TAMU buildings GeoJSON dynamically
        fetch('path/to/tamu-buildings.geojson')
            .then(response => response.json())
            .then(data => {
                var geojson = L.geoJSON(data, {
                    style: function(feature) {
                        return { color: "#500000" }; // Maroon color
                    },
                    onEachFeature: onEachFeature
                }).addTo(map);
            })
            .catch(error => console.error('Error loading GeoJSON:', error));
    </script>
</body>
</html> 
